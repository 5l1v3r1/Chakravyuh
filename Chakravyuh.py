#	Execute suspicious samples in VM environment
#	uses VMWare's vmrun command for automated analysis
#	With SSD and good RAM, samples can be executed in given timeout + 8 seconds overhead.
#	I've used Vmware, but VBOX or Qemu can be used too.
#	you've gotta change VM Commands content
#	Look at the documentation before ChakravyuhFormation function for more info
#	I am attaching autoclicker program but removing pcapreplayer. Kindly make your own. =)

import os, sys, requests, json, time, datetime, md5, subprocess, tempfile

global param

def Usage():
	print("\n***********************************************************")
	print("           Chakravyuh.py - R41P41")
	print "Execute malicious files and compare results on multiple Agents"
	print "Agents :"
	print "Microsoft Enhanced Mitigation Experience Toolkit (EMET)"
	print "Malware Bytes - Anti Exploit (MBAE)"
	#print "Malware Bytes - Anti Malware (MBAM)"
	#redacted custom Analysis Agents
	print "Requirements"
	print "param 1 : md5"
	print "param 2 : Timeout"
	print "param 3 : Agent Name"
	print "param 4 : Extension"
	print "param 5 : mode = sandbox | live"
	print "param 6 : Pcap Hash in case of Pcap availability	"
	print "param 7 : silent -silent"
	print "\nExample:"
	print ""
	
	print "Chakravyuh.py md5 30 EMET .doc sandbox 0"
	print "doc sample in sandbox mode with md5"
	
	print "\nChakravyuh.py md5 30 MBAE .pcap sandbox 0"
	print "pcap replay in sandbox mode with md5.pcap and agent MBAE"
	
	print "\nChakravyuh.py md5 30 EMET,MBAE .doc sandbox md5_pcap -silent"
	print "Execute Doc file on EMET and MBAE in sandbox mode with secondary artifact as pcap. -silent for automations"
	
	print "\nChakravyuh.py md5 120 0 .pcap sandbox 0 -silent"
	print "Execute md5 in all agents provided"
	
	print("***********************************************************\n")

def Xecute(command):
	#	print (command)
	os.system(command)


#	all global directory path end with '/'
#	all binary path end in their name
vmrun_path = "/Applications/VMware\ Fusion.app/Contents/Library/vmrun"
PathToScript = "/Users/r41p41/Desktop/Chakravyuh/"
user = "administrator"
password = "password"
vmwareAgent = "fusion"
#workstation vmwareAgent = "ws"

def ExecuteInGuestWithParams(VM,cmd,cmdParams,Params):
	Xecute("%s -T %s -gu %s -gp %s runPrograminGuest %s %s \"%s\" %s" %(vmrun_path,vmwareAgent,user,password,VM,Params,cmd,cmdParams))

def ExecuteInGuest(VM,cmd,Params):
	Xecute("%s -T %s -gu %s -gp %s runPrograminGuest %s %s \"%s\"" %(vmrun_path,vmwareAgent,user,password,VM,Params,cmd))

def CopyToGuest(VM,src,dest):
	Xecute("%s -T %s -gu %s -gp %s CopyFileFromHostToGuest %s %s %s" %(vmrun_path,vmwareAgent,user,password,VM,src,dest))

def CopyFromGuest(VM,src,dest):
	Xecute("%s -T %s -gu %s -gp %s CopyFileFromGuestToHost %s %s %s" %(vmrun_path,vmwareAgent,user,password,VM,src,dest))

def RevertSnapshot(VM,Snapshot):
	Xecute("%s -T %s -gu %s -gp %s revertToSnapshot %s %s" %(vmrun_path,vmwareAgent,user,password,VM,Snapshot))

def ScreenShot(VM,dest):
	Xecute("%s -T %s -gu %s -gp %s captureScreen %s %s" %(vmrun_path,vmwareAgent,user,password,VM,dest))

def LaunchVM(VM,Params):
	if(Params == 0):
		Xecute("%s -T %s -gu %s -gp %s start %s" %(vmrun_path,vmwareAgent,user,password,VM))
	else:
		Xecute("%s -T %s -gu %s -gp %s start %s %s" %(vmrun_path,vmwareAgent,user,password,VM,Params))

def StopVM(VM):
	Xecute("%s -T %s -gu %s -gp %s stop %s" %(vmrun_path,vmwareAgent,user,password,VM))

def SuspendVM(VM):
	Xecute("%s -T %s -gu %s -gp %s suspend %s" %(vmrun_path,vmwareAgent,user,password,VM))

	
	
#	Documentation for ChakravyuhFormation
#	Architecture of Chakravyuh is
#	for all agents provided
#		revert desired snapshot for every agent, start the VM
#		copy artifacts or requirements into the VM including sample
#		Execute a .bat script to execute sample and use artifacts (can be any script)
#		wait for a timeout
#		If Another .bat script is to be executed, drop and execute (for post processing)
#		copy logs generated by agents, pcap generated by artifacts (optional)and take Screenshot of VM (optional)
#		Revert and suspend the VM

#	in order to add a new agent, just add a new config before ChakravyuhFormation is called
#	and add name of agent in AgentList list in case commandline agent name is given 0 for all agents to be executed

#	Python script will download and drop sample in script directory + folder(hash) + sample(hash) for unique md5/sha256 whatever
#	Then from the same path sample will be picked up (configurable)
#	if downloading samples is redacted from script, provide the sample in script dir / hash(folder) / hash (sample) and then execute the script


#	Agents, Sample and Host:
#	Agents is a dictionary of {list of values and dictionaries}
#	Sample is a Dictionary of values
#	Each Agent value inside Agents list must contain following information
#	Example

#		Name of Agent for logging
#	Agent['Name'] = 'EMET'
#		VMX file path to be used as VM for current Agent
#	Agent['VMX'] = '~/Documents/Virtual\ Machines.localized/Automatex86.vmwarevm/Automatex86.vmx'

#	Snapshot name
#	Agent['VMSnapShot'] = "Chakravyuh"

#		Artifacts Path is a dictionary of key : value = {copy stuff from local path : copy to remote Guest Path}
#		Current Artifacts are Human.exe (Autoclick on buttons), pcapreplayer.exe (replay pcap data in sentient mode or open first URL in browser on choice)
#	Agent['ArtifactsPath'] = {'./human.exe' : 'C:\\Users\\Administrator\\Desktop\\human.exe' ,
#							'./pcapreplayer.exe' : 'C:\\Users\\Administrator\\Desktop\\replayer.exe',
#							...}


#		After artifacts are copied to the VM, Batch Operation begins to start one or more agents, sample in Guest VM
#	Agent['BatchOperation'] = "batch script written here"
#	Agent['BatchDestination'] = 'C:\\Users\\Administrator\\Desktop\\Operation.bat'

#		After timeout a final BatchOperation can be executed to store or pull data on Guest VM
#		This feature is optional
#	Agent['FinalBatchOperation'] = "batch script written here"
#	Agent['FinalBatchDestination'] = 'C:\\Users\\Administrator\\Desktop\\OperationFinal.bat'

#		Screenshot of VM after timeout
#	Agent['ScreenShot'] = 1
#	Agent['ScreenShotPath'] = './%hash%/%hash%.%Extension%.%AgentName%.%Win%.png'
#		Pcap extraction in case of local pcap generation through batch operation
#	Agent['Pcap'] = 1
#	Agent['PcapSource'] = "C:\\Users\\Administrator\\Desktop\\NetworkTraffic.pcap"
#	Agent['PcapPath'] = './%hash%/%hash%.%Extension%.%AgentName%.%Win%.pcap'

#	Agent['OS'] = 'Win7' or 'WinXP' or ...
#		Logs Path is a dictionary of key : value = {copy stuff from remote Guest path : copy to Local Path}
#	Agent['LogPath'] = {'C:\\ProgramData\\Malwarebytes Anti-Exploit\\mbae-alert.log' : './%hash%/%hash%.%Extension%.%AgentName%.%Win%.MBAE.log',
#						'C:\\users\\Administrator\\Desktop\\EMET.log' : './%hash%/%hash%.%Extension%.%AgentName%.%Win%.EMET.log',
#						...}

#	No of seconds to wait between batch operation execution and log extraction and vmreset
#	Sample['Timeout'] = 120
#	Sample['Silent'] = 1

def ChakravyuhFormation(Agents,Sample):
	for Agent in Agents:

		print "\n\nExecuting Agent " + Agent['Name']
		print "VM " + Agent['VMX']
		print "SnapShot " + Agent['VMSnapShot']
		
		
#		Revert Snapshot and start VM
		RevertSnapshot(Agent['VMX'] , Agent['VMSnapShot'])
		if(Sample['Silent']):
			LaunchVM(Agent['VMX'] , "nogui")
		else:
			LaunchVM(Agent['VMX'] , 0)

			
#		Copy all Artifacts required
		for Artifacts in Agent['ArtifactsPath']:
			CopyToGuest(Agent['VMX'] , Artifacts , Agent['ArtifactsPath'][Artifacts])

			
#		Create Temporary file, put batch operation data, copy to Location and delete from local system
		f = tempfile.NamedTemporaryFile(delete=False)
		f.write(Agent['BatchOperation'])
		f.close()
		CopyToGuest(Agent['VMX'] , f.name , Agent['BatchDestination'])
		os.remove(f.name)

		
#		Start Batch Operation
		ExecuteInGuest(Agent['VMX'] , Agent['BatchDestination'] , "-noWait -activeWindow -interactive")

		
#		Sleep for timeout
		time.sleep(int(Sample['Timeout']))

		
#		in case of post execution activity
		if('FinalBatchOperation' in Agent and 'FinalBatchDestination' in Agent):
#			Create Temporary file, put batch operation data, copy to Location and delete from local system
			f = tempfile.NamedTemporaryFile(delete=False)
			f.write(Agent['FinalBatchOperation'])
			f.close()
			CopyToGuest(Agent['VMX'] , f.name , Agent['FinalBatchDestination'])
			os.remove(f.name)

			
#			Final Batch Operation for post exploit logging
			ExecuteInGuest(Agent['VMX'] , Agent['FinalBatchDestination'] , "-noWait -activeWindow -interactive")

			
#		Copy Logs back
		for Log in Agent['LogPath']:
			CopyFromGuest(Agent['VMX'] , Log , Agent['LogPath'][Log])

			
#		Copy back Pcap if required
		if(Agent['Pcap']):
			CopyFromGuest(Agent['VMX'] , Agent['PcapSource'] , Agent['PcapPath'])

			
#		Take ScreenShot if Required
		if(Agent['ScreenShot']):
			ScreenShot(Agent['VMX'] , Agent['ScreenShotPath'])

			
#		Revert SnapShot
		RevertSnapshot(Agent['VMX'] , Agent['VMSnapShot'])

		
#		Suspend VM
#		SuspendVM(Agent['VMX'])
		print Agent['Name'] + " Execution Completed"


import requests, json
#	Download sample from VT Intelligence
def DownloadSample(hash):
	data = ""
	VtApikey = "Place VT api key here"
	try:
		req = requests.get("http://www.virustotal.com/intelligence/download/?hash=%s&apikey=%s" %(hash,VtApiKey))
		if(req.status_code == 200):
			data = req.content
		req.close()
	except:
		print "exception at VT Query"
	else:
		if(data != ""):
			print "Fetched Successfully from VT"
		else:
			print "Not found in VT"
	return data

	
def Process():

	if len(param) == 1:
		Usage()
		exit()


	print("\n***********************************************************")
	print("           Chakravyuh MultiLayer Defense - R41P41")
	print("***********************************************************\n")
	
	AgentList = ['MBAE', 'EMET']
	Agents = []
	Hash = param[1]

	if(param[3] != "0"):
		AgentList = param[3].split(",")

		
	#	Current sample Absolute path
	BinaryPath = PathToScript + Hash + "/" + Hash
	#	Folder path for data storage on Current sample (without ending '/')
	FolderPath = PathToScript + Hash


	#	Download File to its place, if not already present
	if not os.path.isfile(BinaryPath):
		if not os.path.exists(FolderPath):
			os.mkdir(FolderPath)

		buff = DownloadSample(Hash)
		if(buff):
			with open(BinaryPath, 'wb+') as HashBinary:
				HashBinary.write(buff)
	if not os.path.isfile(BinaryPath):
		print "Exiting Chakravyuh, sample download failed."
		exit()

		
	#	Download complimenting pcap if hash given and not already present
	if(param[6] != "0"):
		if not os.path.isfile(FolderPath + "/" + param[6] + ".pcap"):
			buff = DownloadSample(Hash)
			if(buff):
				with open(FolderPath + "/" + param[6] + ".pcap", 'wb+') as HashPcap:
					HashPcap.write(buff)
		if not os.path.isfile(FolderPath + "/" + param[6] + ".pcap"):
			print "Exiting Chakravyuh, pcap download failed."
			exit()

			
			
	print("Sample Downloaded\nReady for detonation")
	print("Selected Agents for Defense")
	for Tool in AgentList:

		CurrentAgent = {'Name' : Tool}

		print CurrentAgent

#		MBAE Configuration

		if(Tool == "MBAE"):
			CurrentAgent['VMX'] = '~/Documents/Virtual\ Machines.localized/Automatex86.vmwarevm/Automatex86.vmx'
			CurrentAgent['ArtifactsPath'] = { PathToScript + 'human.exe' : r'C:\\Users\\Administrator\\Desktop\\human.exe' ,
							PathToScript + 'pcapReplayer.exe' : r'C:\\Users\\Administrator\\Desktop\\pcapReplayer.exe',
							BinaryPath : r'C:\\Users\\Administrator\\Desktop\\check' + param[4]}

			CurrentAgent['BatchDestination'] = r'C:\\Users\\Administrator\\Desktop\\Operation.bat'

			CurrentAgent['BatchOperation'] = "cd C:\\Users\\Administrator\\Desktop\n"
			CurrentAgent['BatchOperation'] += "start human.exe\n"
			CurrentAgent['BatchOperation'] += "sc start mbaesvc\n"
			CurrentAgent['BatchOperation'] += "explorer.exe \"C:\\Program Files\\Malwarebytes Anti-Exploit\\mbae.exe\"\n"
			CurrentAgent['BatchOperation'] += "ping -n 5 127.0.0.1\n"

			#	Complimentary pcap replay
			if(param[6] != "0"):
				CurrentAgent['ArtifactsPath'][FolderPath + '/' + param[6] + '.pcap'] = r'C:\\Users\\Administrator\\Desktop\\Check.pcap'
				CurrentAgent['BatchOperation'] += "cmd /c \"start C:\\Users\\Administrator\\Desktop\\pcapReplayer.exe C:\\Users\\Administrator\\Desktop\\check.pcap\"\n"
				CurrentAgent['BatchOperation'] += "ping -n 5 127.0.0.1\n"

			#	if Sample is a anything other than a pcap execute as per extension given
			if(param[4] != ".pcap"):
				CurrentAgent['BatchOperation'] += "start check" + param[4]
			#	if Sample is a pcap file, execute first URL in pcap/saz in internet explorer
			if(param[4] == ".pcap"):
				CurrentAgent['BatchOperation'] += "C:\\Users\\Administrator\\Desktop\\pcapReplayer.exe C:\\Users\\Administrator\\Desktop\\check.pcap browser:iexplore.exe"

			CurrentAgent['VMSnapShot'] = "Chakravyuh"
			CurrentAgent['OS'] = 'Win7'
			CurrentAgent['LogPath'] = {r'"C:\\ProgramData\\Malwarebytes Anti-Exploit\\mbae-alert.log"' : BinaryPath + param[4] + ".MBAE." + CurrentAgent['OS'] + ".log"}
			CurrentAgent['ScreenShot'] = 1
			CurrentAgent['ScreenShotPath'] = BinaryPath + param[4] + "." + Tool + "." + CurrentAgent['OS'] + ".png"
			CurrentAgent['Pcap'] = 0
			CurrentAgent['PcapSource'] = "C:\\Users\\Administrator\\Desktop\\NetworkTraffic.pcap"
			CurrentAgent['PcapPath'] = ''

#		EMET COnfiguration

		if(Tool == "EMET"):
			CurrentAgent['VMX'] = '~/Documents/Virtual\ Machines.localized/Automatex86.vmwarevm/Automatex86.vmx'
			CurrentAgent['ArtifactsPath'] = { PathToScript + 'human.exe' : r'C:\\Users\\Administrator\\Desktop\\human.exe' ,
							PathToScript + 'pcapReplayer.exe' : r'C:\\Users\\Administrator\\Desktop\\pcapReplayer.exe',
							BinaryPath : r'C:\\Users\\Administrator\\Desktop\\check' + param[4]}

			CurrentAgent['BatchDestination'] = r'C:\\Users\\Administrator\\Desktop\\Operation.bat'

			CurrentAgent['BatchOperation'] = "cd C:\\Users\\Administrator\\Desktop\n"
			CurrentAgent['BatchOperation'] += "start human.exe\n"
			CurrentAgent['BatchOperation'] += "\"C:\\Program Files\\EMET 5.5\\EMET_Conf.exe\" --import \"C:\\Program Files\\EMET 5.5\\StartConfig.xml\"\n"
			CurrentAgent['BatchOperation'] += "sc start EMET_Service\n"
			CurrentAgent['BatchOperation'] += "ping -n 5 127.0.0.1\n"
			CurrentAgent['BatchOperation'] += "wevtutil cl Application\n"

			#	Complimentary pcap replay
			if(param[6] != "0"):
				CurrentAgent['ArtifactsPath'][FolderPath + '/' + param[6] + '.pcap'] = r'C:\\Users\\Administrator\\Desktop\\Check.pcap'
				CurrentAgent['BatchOperation'] += "cmd /c \"start C:\\Users\\Administrator\\Desktop\\pcapReplayer.exe C:\\Users\\Administrator\\Desktop\\check.pcap\"\n"
				CurrentAgent['BatchOperation'] += "ping -n 5 127.0.0.1\n"

			#	if Sample is a anything other than a pcap execute as per extension given
			if(param[4] != ".pcap"):
				CurrentAgent['BatchOperation'] += "start check" + param[4]
			#	if Sample is a pcap file, execute first URL in pcap/saz in internet explorer
			if(param[4] == ".pcap"):
				CurrentAgent['BatchOperation'] += "C:\\Users\\Administrator\\Desktop\\pcapReplayer.exe C:\\Users\\Administrator\\Desktop\\check.pcap browser:iexplore.exe"

			CurrentAgent['FinalBatchDestination'] = r'C:\\Users\\Administrator\\Desktop\\OperationFinal.bat'

			CurrentAgent['FinalBatchOperation'] = "wevtutil qe Application /e:emet >  \"C:\\users\\Administrator\\Desktop\\EMET.log\""

			CurrentAgent['VMSnapShot'] = "Chakravyuh"
			CurrentAgent['OS'] = 'Win7'
			CurrentAgent['LogPath'] = {r'C:\\users\\Administrator\\Desktop\\EMET.log' : BinaryPath + param[4] + ".EMET." + CurrentAgent['OS'] + ".log"}
			CurrentAgent['ScreenShot'] = 1
			CurrentAgent['ScreenShotPath'] = BinaryPath + param[4] + "." + Tool + "." + CurrentAgent['OS'] + ".png"
			CurrentAgent['Pcap'] = 0
			CurrentAgent['PcapSource'] = "C:\\Users\\Administrator\\Desktop\\NetworkTraffic.pcap"
			CurrentAgent['PcapPath'] = ''


		Agents.append(CurrentAgent)

	Sample = {}
	Sample['Timeout'] = param[2]
	Sample['Silent'] = 0
	for arg in sys.argv:
		if(arg == '-silent'):
			Sample['Silent'] = 1

	ChakravyuhFormation(Agents,Sample)

if __name__ == '__main__':

	param = sys.argv
	# param = [ 0 , md5 , timeout , agent , extension , snapshot , pcaphash , silent ]
	Process()
